#!/bin/bash

# DevSecOps Security Scanner
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
RESULTS_DIR="$PROJECT_DIR/security-results"
SCAN_DIR="$PROJECT_DIR/security"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p "$RESULTS_DIR"
mkdir -p "$SCAN_DIR"

echo -e "${BLUE}üîí –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local deps=("docker" "python3" "pip3" "curl")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        exit 1
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# SAST - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
run_sast() {
    log "–ó–∞–ø—É—Å–∫ SAST –∞–Ω–∞–ª–∏–∑–∞..."
    
    cd "$PROJECT_DIR"
    
    # Bandit –¥–ª—è Python
    if [ -f "requirements.txt" ]; then
        log "–ó–∞–ø—É—Å–∫ Bandit..."
        pip3 install bandit
        bandit -r . -f json -o "$RESULTS_DIR/bandit-results.json" || true
    fi
    
    # Semgrep
    if command -v semgrep &> /dev/null; then
        log "–ó–∞–ø—É—Å–∫ Semgrep..."
        semgrep ci --json --output "$RESULTS_DIR/semgrep-results.json" || true
    else
        warning "Semgrep –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install semgrep"
    fi
    
    # Safety –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ -f "requirements.txt" ]; then
        log "–ó–∞–ø—É—Å–∫ Safety..."
        pip3 install safety
        safety check --json --output "$RESULTS_DIR/safety-results.json" || true
    fi
    
    log "SAST –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# DAST - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
run_dast() {
    log "–ó–∞–ø—É—Å–∫ DAST –∞–Ω–∞–ª–∏–∑–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
    if ! curl -s http://localhost:8000/health/ > /dev/null 2>&1; then
        warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ localhost:8000. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ DAST."
        return
    fi
    
    # OWASP ZAP
    if docker ps | grep -q zap; then
        log "–ó–∞–ø—É—Å–∫ OWASP ZAP..."
        docker run --rm -v "$RESULTS_DIR:/zap/wrk" owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:8000 -J zap-results.json || true
    else
        log "–ó–∞–ø—É—Å–∫ OWASP ZAP –≤ Docker..."
        docker run --rm -v "$RESULTS_DIR:/zap/wrk" owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:8000 -J zap-results.json || true
    fi
    
    # Nuclei
    if command -v nuclei &> /dev/null; then
        log "–ó–∞–ø—É—Å–∫ Nuclei..."
        nuclei -u http://localhost:8000 -json -o "$RESULTS_DIR/nuclei-results.json" || true
    else
        warning "Nuclei –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest"
    fi
    
    log "DAST –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# Security Checks
run_security_checks() {
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    # TruffleHog –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
    if command -v trufflehog &> /dev/null; then
        log "–ó–∞–ø—É—Å–∫ TruffleHog..."
        trufflehog --only-verified --format json --output-file "$RESULTS_DIR/trufflehog-results.json" . || true
    else
        warning "TruffleHog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install trufflehog"
    fi
    
    # Hadolint –¥–ª—è Dockerfile
    if [ -f "Dockerfile" ]; then
        log "–ó–∞–ø—É—Å–∫ Hadolint..."
        docker run --rm -i hadolint/hadolint < Dockerfile || true
    fi
    
    # Checkov –¥–ª—è IaC
    if command -v checkov &> /dev/null; then
        log "–ó–∞–ø—É—Å–∫ Checkov..."
        checkov -d . --output json --output-file-path "$RESULTS_DIR/checkov-results.json" || true
    else
        warning "Checkov –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install checkov"
    fi
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
scan_docker_image() {
    log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞..."
    
    if [ -f "Dockerfile" ]; then
        # Trivy
        if command -v trivy &> /dev/null; then
            log "–ó–∞–ø—É—Å–∫ Trivy..."
            trivy image --format json --output "$RESULTS_DIR/trivy-results.json" . || true
        else
            warning "Trivy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://aquasecurity.github.io/trivy/latest/getting-started/installation/"
        fi
        
        # Snyk
        if command -v snyk &> /dev/null; then
            log "–ó–∞–ø—É—Å–∫ Snyk..."
            snyk container test . --json > "$RESULTS_DIR/snyk-results.json" || true
        else
            warning "Snyk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g snyk"
        fi
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    log "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    
    cd "$PROJECT_DIR"
    
    if [ -f "scripts/security-gateway.py" ]; then
        python3 scripts/security-gateway.py
    else
        error "Security Gateway —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
    
    local report_file="$RESULTS_DIR/security-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << EOF
# –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

**–î–∞—Ç–∞:** $(date)
**–ü—Ä–æ–µ–∫—Ç:** DevSecOps Pipeline

## –û–±–∑–æ—Ä

–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

### SAST (–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)
EOF
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SAST
    for file in "$RESULTS_DIR"/*-results.json; do
        if [ -f "$file" ]; then
            local tool_name=$(basename "$file" -results.json)
            echo "#### $tool_name" >> "$report_file"
            echo "–§–∞–π–ª: \`$file\`" >> "$report_file"
            echo "" >> "$report_file"
        fi
    done
    
    cat >> "$report_file" << EOF

### DAST (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)
- OWASP ZAP —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- Nuclei —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

### Security Checks
- TruffleHog (–ø–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤)
- Hadolint (Dockerfile)
- Checkov (IaC)

### Docker Security
- Trivy —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- Snyk —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
4. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
EOF
    
    log "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üöÄ DevSecOps Security Scanner${NC}"
    echo "=================================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p "$RESULTS_DIR"
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    run_sast
    run_dast
    run_security_checks
    scan_docker_image
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analyze_results
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report
    
    echo -e "${GREEN}‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo -e "${BLUE}üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $RESULTS_DIR${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 