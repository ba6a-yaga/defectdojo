#!/usr/bin/env python3
"""
Security Gateway - –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–ø–ª–æ—è
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any

class SecurityGateway:
    def __init__(self):
        self.results_dir = Path("all-results")
        self.security_report = {
            "critical_vulnerabilities": 0,
            "high_vulnerabilities": 0,
            "medium_vulnerabilities": 0,
            "low_vulnerabilities": 0,
            "total_vulnerabilities": 0,
            "recommendations": [],
            "block_deployment": False,
            "scan_results": {}
        }
        
    def analyze_sast_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SAST —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –ê–Ω–∞–ª–∏–∑ SAST —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # Bandit
        bandit_file = self.results_dir / "bandit-results.json"
        if bandit_file.exists():
            try:
                print(f"üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ Bandit: {bandit_file}")
                with open(bandit_file, 'r') as f:
                    bandit_data = json.load(f)
                    issues = bandit_data.get('results', [])
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º –≤ Bandit –æ—Ç—á–µ—Ç–µ")
                    
                    for issue in issues:
                        severity = issue.get('issue_severity', 'medium')
                        issue_text = issue.get('issue_text', 'Unknown')
                        print(f"üîç –ü—Ä–æ–±–ª–µ–º–∞: {issue_text} (Severity: {severity})")
                        
                        if severity == 'HIGH':
                            self.security_report['high_vulnerabilities'] += 1
                            print(f"  üî¥ –í—ã—Å–æ–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                        elif severity == 'MEDIUM':
                            self.security_report['medium_vulnerabilities'] += 1
                            print(f"  üü° –°—Ä–µ–¥–Ω—è—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                        elif severity == 'LOW':
                            self.security_report['low_vulnerabilities'] += 1
                            print(f"  üü¢ –ù–∏–∑–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                    
                    if issues:
                        self.security_report['recommendations'].append(
                            f"Bandit –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(issues)} –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ"
                        )
                    else:
                        print("‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º –≤ Bandit –æ—Ç—á–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Bandit: {e}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª Bandit –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Semgrep
        semgrep_file = self.results_dir / "semgrep-results.json"
        if semgrep_file.exists():
            try:
                with open(semgrep_file, 'r') as f:
                    semgrep_data = json.load(f)
                    results = semgrep_data.get('results', [])
                    for result in results:
                        severity = result.get('extra', {}).get('severity', 'WARNING')
                        if severity == 'ERROR':
                            self.security_report['high_vulnerabilities'] += 1
                        elif severity == 'WARNING':
                            self.security_report['medium_vulnerabilities'] += 1
                        elif severity == 'INFO':
                            self.security_report['low_vulnerabilities'] += 1
                    
                    if results:
                        self.security_report['recommendations'].append(
                            f"Semgrep –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(results)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Semgrep: {e}")
    
    def analyze_dast_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DAST —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –ê–Ω–∞–ª–∏–∑ DAST —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # ZAP —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –∏—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        zap_files = []
        
        # –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ ZAP
        possible_names = [
            "report_json.json",
            "zap_scan.json", 
            "zap-scan-results.json",
            "zap-report.json",
            "scan-results.json"
        ]
        
        for name in possible_names:
            zap_files.extend(list(self.results_dir.glob(name)))
        
        # –ü–æ–∏—Å–∫ –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        for subdir in self.results_dir.iterdir():
            if subdir.is_dir():
                for name in possible_names:
                    zap_files.extend(list(subdir.glob(name)))
        
        # –ü–æ–∏—Å–∫ –≤ .zap –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        zap_dir = self.results_dir / ".zap"
        if zap_dir.exists():
            zap_files.extend(list(zap_dir.glob("*.json")))
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å zap –≤ –∏–º–µ–Ω–∏
        zap_files.extend(list(self.results_dir.glob("*zap*.json")))
        
        # –ü–æ–∏—Å–∫ –≤ zap-scan-results –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
        zap_scan_dir = self.results_dir / "zap-scan-results"
        if zap_scan_dir.exists():
            zap_files.extend(list(zap_scan_dir.glob("*.json")))
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏
        zap_files = list(set([str(f) for f in zap_files]))
        zap_files = [Path(f) for f in zap_files]
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(zap_files)} —Ñ–∞–π–ª–æ–≤ ZAP:")
        for i, file in enumerate(zap_files, 1):
            print(f"  {i}. {file.name} (–ø—É—Ç—å: {file})")
        
        if zap_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for i, zap_file in enumerate(zap_files):
                print(f"üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ ZAP #{i+1}: {zap_file}")
                try:
                    with open(zap_file, 'r') as f:
                        content = f.read()
                        print(f"  üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} –±–∞–π—Ç")
                        if len(content) > 0:
                            zap_data = json.loads(content)
                            alerts = zap_data.get('alerts', [])
                            print(f"  üìä –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª–µ: {len(alerts)}")
                        else:
                            print(f"  ‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
            try:
                print(f"üìÑ –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ZAP: {zap_files[0]}")
                with open(zap_files[0], 'r') as f:
                    zap_data = json.load(f)
                    alerts = zap_data.get('alerts', [])
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(alerts)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ ZAP –æ—Ç—á–µ—Ç–µ")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                    spectre_count = 0
                    http_method_count = 0
                    
                    for alert in alerts:
                        risk = alert.get('risk', 'Medium')
                        alert_id = alert.get('id', '')
                        alert_name = alert.get('name', '')
                        
                        print(f"üîç –£—è–∑–≤–∏–º–æ—Å—Ç—å: {alert_name} (ID: {alert_id}, Risk: {risk})")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Spectre —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (90004)
                        if alert_id == '90004' or 'Spectre' in alert_name:
                            spectre_count += 1
                            self.security_report['medium_vulnerabilities'] += 1
                            print(f"  ‚ö†Ô∏è Spectre —É—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                            continue
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö HTTP –º–µ—Ç–æ–¥–æ–≤ (90028)
                        if alert_id == '90028' or 'Insecure HTTP Method' in alert_name:
                            http_method_count += 1
                            self.security_report['medium_vulnerabilities'] += 1
                            print(f"  ‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                            continue
                        
                        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
                        if risk == 'High':
                            self.security_report['high_vulnerabilities'] += 1
                            print(f"  üî¥ –í—ã—Å–æ–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                        elif risk == 'Medium':
                            self.security_report['medium_vulnerabilities'] += 1
                            print(f"  üü° –°—Ä–µ–¥–Ω—è—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                        elif risk == 'Low':
                            self.security_report['low_vulnerabilities'] += 1
                            print(f"  üü¢ –ù–∏–∑–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                    
                    if alerts:
                        recommendations = []
                        if spectre_count > 0:
                            recommendations.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {spectre_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π Spectre - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                        if http_method_count > 0:
                            recommendations.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {http_method_count} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö HTTP –º–µ—Ç–æ–¥–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
                        
                        if recommendations:
                            self.security_report['recommendations'].extend(recommendations)
                        
                        self.security_report['recommendations'].append(
                            f"OWASP ZAP –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(alerts)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
                        )
                    else:
                        print("‚ÑπÔ∏è –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ ZAP –æ—Ç—á–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ZAP: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã ZAP
                for file in self.results_dir.glob("*zap*"):
                    print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª ZAP: {file}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª—ã ZAP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Nuclei —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        nuclei_files = list(self.results_dir.glob("nuclei-*.json"))
        if nuclei_files:
            try:
                with open(nuclei_files[0], 'r') as f:
                    nuclei_data = json.load(f)
                    if isinstance(nuclei_data, list):
                        for result in nuclei_data:
                            severity = result.get('info', {}).get('severity', 'medium')
                            if severity == 'critical':
                                self.security_report['critical_vulnerabilities'] += 1
                            elif severity == 'high':
                                self.security_report['high_vulnerabilities'] += 1
                            elif severity == 'medium':
                                self.security_report['medium_vulnerabilities'] += 1
                            elif severity == 'low':
                                self.security_report['low_vulnerabilities'] += 1
                        
                        if nuclei_data:
                            self.security_report['recommendations'].append(
                                f"Nuclei –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(nuclei_data)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
                            )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Nuclei: {e}")
    
    def analyze_security_checks(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Security Checks"""
        print("üîç –ê–Ω–∞–ª–∏–∑ Security Checks —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # TruffleHog
        trufflehog_file = self.results_dir / "trufflehog-results.json"
        if trufflehog_file.exists():
            try:
                with open(trufflehog_file, 'r') as f:
                    trufflehog_data = json.load(f)
                    if isinstance(trufflehog_data, list):
                        for result in trufflehog_data:
                            self.security_report['critical_vulnerabilities'] += 1
                        
                        if trufflehog_data:
                            self.security_report['recommendations'].append(
                                f"TruffleHog –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(trufflehog_data)} —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ"
                            )
                            self.security_report['block_deployment'] = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ TruffleHog: {e}")
        
        # Checkov
        checkov_file = self.results_dir / "checkov-results.json"
        if checkov_file.exists():
            try:
                with open(checkov_file, 'r') as f:
                    checkov_data = json.load(f)
                    results = checkov_data.get('results', {})
                    for result in results.values():
                        if isinstance(result, dict):
                            failed_checks = result.get('failed_checks', [])
                            for check in failed_checks:
                                severity = check.get('severity', 'MEDIUM')
                                if severity == 'CRITICAL':
                                    self.security_report['critical_vulnerabilities'] += 1
                                elif severity == 'HIGH':
                                    self.security_report['high_vulnerabilities'] += 1
                                elif severity == 'MEDIUM':
                                    self.security_report['medium_vulnerabilities'] += 1
                                elif severity == 'LOW':
                                    self.security_report['low_vulnerabilities'] += 1
                    
                    if results:
                        self.security_report['recommendations'].append(
                            f"Checkov –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ"
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Checkov: {e}")
    
    def calculate_totals(self):
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.security_report['total_vulnerabilities'] = (
            self.security_report['critical_vulnerabilities'] +
            self.security_report['high_vulnerabilities'] +
            self.security_report['medium_vulnerabilities'] +
            self.security_report['low_vulnerabilities']
        )
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–ø–ª–æ–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        if self.security_report['critical_vulnerabilities'] > 0:
            self.security_report['block_deployment'] = True
            self.security_report['recommendations'].append(
                "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´! –î–µ–ø–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–ø–ª–æ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã—Å–æ–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        if self.security_report['high_vulnerabilities'] >= 5:
            self.security_report['block_deployment'] = True
            self.security_report['recommendations'].append(
                "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π! –î–µ–ø–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        report = f"""
# –û—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:
- üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {self.security_report['critical_vulnerabilities']}
- üü† –í—ã—Å–æ–∫–∏–µ: {self.security_report['high_vulnerabilities']}
- üü° –°—Ä–µ–¥–Ω–∏–µ: {self.security_report['medium_vulnerabilities']}
- üü¢ –ù–∏–∑–∫–∏–µ: {self.security_report['low_vulnerabilities']}
- üìä –í—Å–µ–≥–æ: {self.security_report['total_vulnerabilities']}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""
        
        for rec in self.security_report['recommendations']:
            report += f"- {rec}\n"
        
        if self.security_report['block_deployment']:
            report += "\n## üö® –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ–ø–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
        else:
            report += "\n## ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ–ø–ª–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        with open('security-report.json', 'w') as f:
            json.dump(self.security_report, f, indent=2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –¥–µ–ø–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if self.security_report['block_deployment']:
            sys.exit(1)
        else:
            sys.exit(0)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üõ°Ô∏è Security Gateway –∑–∞–ø—É—â–µ–Ω")
        
        if not self.results_dir.exists():
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.analyze_sast_results()
        self.analyze_dast_results()
        self.analyze_security_checks()
        self.calculate_totals()
        self.generate_report()

if __name__ == "__main__":
    gateway = SecurityGateway()
    gateway.run() 