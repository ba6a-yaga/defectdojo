#!/bin/bash

# DAST Local Testing Script
# –ê–≤—Ç–æ—Ä: –ü–∞–¥–∞–ª–∫–æ –†–æ–º–∞–Ω
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DAST –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TARGET_URL="http://localhost:8000"
RESULTS_DIR="dast-results"
CONTAINER_NAME="test-app"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p $RESULTS_DIR

log "üîç –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ DAST —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
log "–¶–µ–ª—å: $TARGET_URL"
log "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $RESULTS_DIR"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
check_app_availability() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    if ! curl -f -s $TARGET_URL/health/ > /dev/null; then
        error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ $TARGET_URL"
        log "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:"
        log "docker run -d --name $CONTAINER_NAME -p 8000:8000 sib-diplom-app:latest"
        exit 1
    fi
    
    success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
test_endpoints() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
    
    endpoints=(
        "/"
        "/health/"
        "/api/"
        "/api/vulnerabilities/"
        "/api/test/"
        "/api/info/"
        "/api/status/"
    )
    
    for endpoint in "${endpoints[@]}"; do
        if curl -f -s "$TARGET_URL$endpoint" > /dev/null; then
            success "‚úÖ $endpoint - –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            warning "‚ö†Ô∏è $endpoint - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ OWASP ZAP
run_zap() {
    log "üîç –ó–∞–ø—É—Å–∫ OWASP ZAP..."
    
    if docker ps | grep -q zap; then
        log "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ZAP"
        docker exec zap zap-baseline.py -t $TARGET_URL -J $RESULTS_DIR/zap-results.json || true
    else
        log "–ó–∞–ø—É—Å–∫ ZAP –≤ Docker..."
        docker run --rm -v "$(pwd)/$RESULTS_DIR:/zap/wrk" owasp/zap2docker-stable \
            zap-baseline.py -t $TARGET_URL -J zap-results.json || true
    fi
    
    success "ZAP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Nuclei
run_nuclei() {
    log "üîç –ó–∞–ø—É—Å–∫ Nuclei..."
    
    if command -v nuclei &> /dev/null; then
        nuclei -u $TARGET_URL -json -o $RESULTS_DIR/nuclei-results.json || true
        success "Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    else
        warning "Nuclei –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        log "go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Nikto
run_nikto() {
    log "üîç –ó–∞–ø—É—Å–∫ Nikto..."
    
    docker run --rm --network host nikitinroman/nikto \
        -h $TARGET_URL \
        -Format json \
        -output $RESULTS_DIR/nikto-results.json || true
    
    success "Nikto —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Wapiti
run_wapiti() {
    log "üîç –ó–∞–ø—É—Å–∫ Wapiti..."
    
    docker run --rm --network host wapiti/wapiti \
        -u $TARGET_URL \
        -f json \
        -o $RESULTS_DIR/wapiti-results.json || true
    
    success "Wapiti —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ SQLMap
run_sqlmap() {
    log "üîç –ó–∞–ø—É—Å–∫ SQLMap..."
    
    docker run --rm --network host sqlmap/sqlmap \
        -u "$TARGET_URL/api/vulnerabilities/search/?q=test" \
        --batch \
        --random-agent \
        --output-dir $RESULTS_DIR/sqlmap-results || true
    
    success "SQLMap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    log "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_files=(
        "zap-results.json"
        "nuclei-results.json"
        "nikto-results.json"
        "wapiti-results.json"
    )
    
    total_vulnerabilities=0
    high_vulnerabilities=0
    medium_vulnerabilities=0
    low_vulnerabilities=0
    
    for file in "${result_files[@]}"; do
        if [ -f "$RESULTS_DIR/$file" ]; then
            log "üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $file"
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
            if grep -q "vulnerability\|vuln\|alert\|issue" "$RESULTS_DIR/$file" 2>/dev/null; then
                count=$(grep -c "vulnerability\|vuln\|alert\|issue" "$RESULTS_DIR/$file" 2>/dev/null || echo "0")
                log "   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: $count"
                total_vulnerabilities=$((total_vulnerabilities + count))
            fi
        else
            warning "–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        fi
    done
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    log "üìä –°–≤–æ–¥–∫–∞ DAST —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    log "   –í—Å–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: $total_vulnerabilities"
    log "   –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $RESULTS_DIR"
    
    if [ $total_vulnerabilities -gt 0 ]; then
        warning "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!"
        log "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª–∞—Ö:"
        ls -la $RESULTS_DIR/
    else
        success "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if docker ps | grep -q $CONTAINER_NAME; then
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker stop $CONTAINER_NAME || true
        docker rm $CONTAINER_NAME || true
    fi
    
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ DAST —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v curl &> /dev/null; then
        error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    check_app_availability
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    test_endpoints
    
    # –ó–∞–ø—É—Å–∫ DAST –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    run_zap
    run_nuclei
    run_nikto
    run_wapiti
    run_sqlmap
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analyze_results
    
    success "‚úÖ DAST —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $RESULTS_DIR"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 